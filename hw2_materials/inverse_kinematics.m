function thetad = inverse_kinematics(u)% performs inverse kinematics computations with various methods% Stefan Schaal, March 2009% split the input u into meaningful quantitiesn = (length(u)-2)/2;theta = u(1:n);xd    = u(n+1:n+2);links = u(n+3:end);n = length(theta);m = length(xd);% NOTE: insert your Jacobian calculation here% Center of mass JacobianJ14=-links(4)*sin(theta(1)+theta(2)+theta(3)+theta(4));J13=-2*links(3)*sin(theta(1)+theta(2)+theta(3))+J14;J12=-3*links(2)*sin(theta(1)+theta(2))+J13;J11=-4*links(1)*sin(theta(1))+J12;J24=links(4)*cos(theta(1)+theta(2)+theta(3)+theta(4));J23=2*links(3)*cos(theta(1)+theta(2)+theta(3))+J24;J22=3*links(2)*cos(theta(1)+theta(2))+J23;J21=4*links(1)*cos(theta(1))+J22;J = (1/4).*[J11 J12 J13 J14; J21 J22 J23 J24];  % convert cartesian velocities into joint velocities% NOTE: insert the required inverse kinematics methods at this%       location% alpha = 1;% thetad = alpha * J' * xd;% alpha = 1;% thetad = alpha * J' * inv( J * J' ) * xd;